from Temporary.Data.data import *
import random
import os
import shutil
from pathlib import Path


class Useragents:
    def __init__(self) -> None:
        # selalu pastikan a2f True sesuai permintaan
        self.a2f = True

    def Instagram(self):
        """Generate a modern (2025-style) Instagram User-Agent string.

        The exact numeric version is simulated to reflect newer 2025 releases.
        """
        self.pxl = random.choice(["1080x2111","1080x2069","2874x1440", "720x1521", "1080x2148","1080x2136","1080x2011","720x1344","1280x800"])
        #self.pxl = str(random.choice(['720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733']))
        self.kode = str(random.choice(['145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186']))
        self.locale = str(random.choice((["id_ID","en_GB", "en_US", "ar_LY", "fr_FR", "es_ES", "de_DE", "it_IT", "pt_BR", "tr_TR","ru_RU","in_ID"])))
        self.iphn = random.choice(["11,8", "12,1", "9,2", "13,3", "10,5", "12,8", "10,4", "13,1", "9,1", "13,4", "12,3", "10,3", "8,1", "14,0", "9,4", "11,3", "12,0", "10,1", "14,2", "13,2", "9,3", "11,4", "12,4", "10,6", "13,5", "12,5", "10,7", "13,6", "12,7", "14,1", "13,7", "9,5", "11,6", "10,8", "12,9", "13,8", "14,3", "10,2", "12,6", "11,5", "9,6", "12,2", "14,4", "13,9", "11,7", "12,10", "10,9", "13,10", "9,7", "14,5", "11,9", "12,11", "10,10", "14,6", "13,11", "11,10", "9,8", "12,12", "13,12", "14,7", "13,13", "9,9", "11,11", "14,8", "10,11", "12,13", "13,14", "15,0", "16,3", "17,5", "18,0", "19,1", "20,2", "21,3", "22,4", "23,5", "24,6", "25,7", "26,8", "27,9", "28,10"])
        self.ios = random.choice(["iOS 14_4_1", "iOS 15_0", "iOS 12_1_3", "iOS 15_0_1", "iOS 14_7_1", "iOS 14_6", "iOS 13_5", "iOS 14_0_1", "iOS 11_2_6", "iOS 15_1", "iOS 13_4", "iOS 12_3", "iOS 13_0", "iOS 14_5", "iOS 15_2", "iOS 12_2", "iOS 14_1", "iOS 13_2_2", "iOS 12_4", "iOS 15_3", "iOS 11_4_1", "iOS 15_4", "iOS 14_8", "iOS 13_6", "iOS 16_0", "iOS 16_1", "iOS 16_2", "iOS 16_3", "iOS 16_4", "iOS 16_5", "iOS 16_6","iOS 16_7", "iOS 17_0", "iOS 17_1", "iOS 17_2", "iOS 17_3", "iOS 17_4", "iOS 17_5","iOS 15_5", "iOS 13_1_3", "iOS 14_3", "iOS 12_0", "iOS 12_1", "iOS 12_5", "iOS 13_3","iOS 14_4", "iOS 13_7", "iOS 14_2", "iOS 15_6", "iOS 16_8", "iOS 13_8", "iOS 13_9","iOS 12_6", "iOS 14_9", "iOS 15_7", "iOS 16_9", "iOS 16_10", "iOS 17_6", "iOS 17_7"])
        self.scale = ["2.00", "3.00", "2.61", "2.75", "2.50", "1.80", "3.20", "2.40", "2.10", "3.50", "1.90", "2.30", "2.90", "1.70", "3.10", "2.20", "2.60", "2.80", "1.85", "2.45", "3.30", "1.95", "2.55", "2.65", "3.40", "2.95", "3.60", "1.75", "2.50", "3.00", "3.80", "2.15", "1.65", "3.20"]
        self.gamut = ["display", "P3", "wide", "display", "P3", "wide", "sRGB", "Rec. 2020", "Adobe RGB", "DCI-P3", "display-p3", "film", "RGB", "HDR", "colour", "color", "NTSC", "XYZ", "Rec. 709", "ITU-R BT.2020", "BT.2100", "DCI-P3 100%", "P3 Wide", "HDR10", "HLG","Wide Color Gamut", "Full RGB", "Wide Gamut RGB", "AdobeRGB 1998", "ITU BT.709", "Rec. 709", "Vivid", "Natural", "Custom", "Standard", "Enhanced", "High Dynamic Range", "HGI", "D65", "D75", "P3-D65", "EMOLED", "Super AMOLED", "OLED", "Amoled", "Brilliant", "ColorGamut", "HDR+"]
        # Build a realistic Instagram version string and include selected locale and scale
        # Update: generate a modern 2025-like Instagram version number.
        # Assumption: major build numbers increased since earlier examples; using a plausible 2025 range.
        self.versi_instagram = f"{random.randint(350,420)}.0.0.{random.randint(200,350)}.{random.randint(1,200)}"
        chosen_scale = random.choice(self.scale)
        # Use locale if available, default to id_ID
        locale = self.locale if hasattr(self, 'locale') else 'id_ID'
        ua = (
            f"Instagram {self.versi_instagram} (iPhone{self.iphn}; {self.ios}; {locale}; in-ID; scale={chosen_scale}; {self.pxl}; qcom; 719982544) NW/3"
        )

        # ensure the a2f attribute is always True
        self.a2f = True
        return ua

    def get_ua_and_a2f(self):
        """Return a dict with UA and a2f flag (a2f always True)."""
        ua = self.Instagram()
        return { 'ua': ua, 'a2f': True }

    @staticmethod
    def move_if_not_cp_ok(source_path: str, status: str):
        """If status is not 'CP' or 'OK', move the file (or write content) into the repository's OK folder.

        Treats 'CP' as OK so CP results won't be considered missing/incorrect.
        """
        # Treat 'CP' same as 'OK' (do nothing)
        if status in ("CP", "OK"):
            return None

        # locate or create OK folder
        current = Path(__file__).resolve().parent
        ok_dir = None
        for _ in range(6):
            candidate = current / 'OK'
            if candidate.exists() and candidate.is_dir():
                ok_dir = candidate
                break
            current = current.parent
        if ok_dir is None:
            ok_dir = Path(__file__).resolve().parent.parent / 'OK'
            ok_dir.mkdir(parents=True, exist_ok=True)

        try:
            src = Path(source_path)
            if not src.exists():
                # treat source_path as raw content; write into OK
                filename = f"item_{abs(hash(source_path))}.txt"
                dest = ok_dir / filename
                with open(dest, 'w', encoding='utf-8') as f:
                    f.write(str(source_path))
                return str(dest)

            dest = ok_dir / src.name
            if dest.exists():
                dest = ok_dir / f"{src.stem}_{os.getpid()}{src.suffix}"
            shutil.move(str(src), str(dest))
            return str(dest)
        except Exception:
            return None

            